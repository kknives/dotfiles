set nocompatible

set number relativenumber
set hidden

" swap files (.swp) in a common location
" // means use the file's full path
set dir=~/.vim/_swap//

" backup files (~) in a common location if possible
set backup
set backupdir=~/.vim/_backup/,~/tmp,.

" turn on undo files, put them in a common location
set undofile
set undodir=~/.vim/_undo/

set laststatus=2
set noshowmode

nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
nnoremap <Leader>y :call system('xclip -selection clipboard', @0)<CR>

" Omni Completion
filetype plugin on
set omnifunc=syntaxcomplete#Complete

" More natural splitting
set splitbelow
set splitright

" Use spaces instead of tabs
set expandtab

" Be smart when using tabs
set smarttab

" 1 tab == 4 spaces
set shiftwidth=2
set tabstop=2

" Codefolding
set foldmethod=indent   
set foldnestmax=10
set nofoldenable
set foldlevel=2
" Key binds for codefolding
inoremap <F9> <C-O>za
nnoremap <F9> za
onoremap <F9> <C-C>za
vnoremap <F9> zf

" Setup vim-plug

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Define plugins
call plug#begin()

Plug 'tikhomirov/vim-glsl'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'Yggdroot/indentLine'
Plug 'dahu/vimple'
Plug 'neovimhaskell/haskell-vim'
Plug 'Raimondi/vim-buffalo'
Plug 'autozimu/LanguageClient-neovim', {
      \ 'branch': 'next',
      \ 'do': 'make release',
      \ }
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'alx741/vim-hindent'
Plug 'preservim/nerdcommenter'
Plug 'rust-lang/rust.vim'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'roxma/vim-tmux-clipboard'
Plug 'kana/vim-operator-user'
Plug 'ruby-formatter/rufo-vim'
Plug 'rhysd/vim-clang-format'
Plug 'sbdchd/neoformat'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-obsession'
Plug 'vim-python/python-syntax'
Plug 'itchyny/lightline.vim'
Plug 'xolox/vim-misc'
Plug 'elixir-editors/vim-elixir'
Plug 'JuliaEditorSupport/julia-vim'
Plug 'preservim/tagbar'
Plug 'bfrg/vim-cpp-modern'
Plug 'bluz71/vim-nightfly-guicolors'
Plug 'ghifarit53/tokyonight-vim'

call plug#end()

" PLACE ALL PLUGIN SPECIFIC CONFIGURATION HERE

" LSP config
" let g:LanguageClient_serverCommands = {
" 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls']
" \ }
" let g:LanguageClient_hideVirtualTextsOnInsert = 1

" Ultisnips config
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsEditSplit="vertical"

" FZF mappings
let g:fzf_layout = { 'down': '~40%' }
map <leader>t :GFiles<CR>
nnoremap <C-g> :Ag<Cr>

" Tagbar toggle
nmap <F8> :TagbarToggle<CR>

nmap <F5> <Plug>(lcn-menu)
" Or map each action separately
nmap <silent><Leader>d <Plug>(lcn-hover)
nmap <silent> gd <Plug>(lcn-definition)
nmap <silent> <F2> <Plug>(lcn-rename)

let g:NERDSpaceDelims = 1

" netrw configs
let g:netrw_liststyle = 3
let g:netrw_banner = 0
let g:netrw_winsize = 15
let g:netrw_browse_split = 4

" Enable syntax highlighting for python
let g:python_highlight_all = 1

" Haskell specific highlighting configs
let g:haskell_classic_highlighting = 1   " to enable highlighting of `forall`
let g:hindent_on_save = 1

" Disable indent highlighting by default
" Enable using :IndentLinesToggle
let g:indentLine_char = 'â¦™'
let g:indentLine_enabled = 0

nmap <silent> <leader>b <Plug>BuffaloTrigger

" Enable rufo (RUby FOrmat)
" let g:rufo_auto_formatting = 1

" For yaml files
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType yml setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType yml :IndentLinesToggle
autocmd FileType yaml :IndentLinesToggle

" For autoformatting code on save
let g:neoformat_only_msg_on_error = 1

autocmd BufWritePre *.jsx Neoformat
autocmd BufWritePre *.go Neoformat
autocmd BufWritePre *.py Neoformat
autocmd BufWritePre *.cpp Neoformat
autocmd BufWritePre *.h Neoformat
autocmd BufWritePre *.R Neoformat
autocmd BufWritePre *.tex Neoformat
autocmd BufWritePre *.ltx Neoformat

" Python support for nvim
let g:python3_host_prog="/bin/python3"

" C/C++ based plugins
nmap <F8> :TagbarToggle<CR>
" Clang-format options
let g:clang_format#code_style = "mozilla"
autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
autocmd FileType c,cpp,objc vnoremap <buffer><Leader>cf :ClangFormat<CR>

" Fugitive keymaps
nmap <Leader>gd :Gdiffsplit<CR>

" Defining theme
syntax on
filetype plugin indent on
set termguicolors
colorscheme nightfly
let g:nightflyCursorColor = 1
let g:lightline = {
      \ 'colorscheme': 'nightfly',
      \ }
" vimdiff
" Diff colors (Stand with Ukraine).
